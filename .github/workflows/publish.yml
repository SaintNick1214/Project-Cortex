name: Publish to npm

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: check
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Get previous version (if commit exists)
          git show HEAD~1:package.json > prev-package.json 2>/dev/null || echo '{"version":"0.0.0"}' > prev-package.json
          PREVIOUS_VERSION=$(node -p "require('./prev-package.json').version")
          echo "Previous version: $PREVIOUS_VERSION"
          
          # Check if changed
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "✅ Version changed: $PREVIOUS_VERSION → $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "⏭️  Version unchanged, skipping publish"
          fi

  publish:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test
        env:
          CONVEX_URL: ${{ secrets.CONVEX_URL }}
          CONVEX_DEPLOY_KEY: ${{ secrets.CONVEX_DEPLOY_KEY }}

      - name: Build package
        run: npm run build

      - name: Verify package contents
        run: npm pack --dry-run

      - name: Publish to npm
        run: npm publish --access public --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create Git Tag
        run: |
          VERSION=${{ needs.check-version.outputs.new-version }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-version.outputs.new-version }}
          release_name: v${{ needs.check-version.outputs.new-version }}
          body: |
            ## Release v${{ needs.check-version.outputs.new-version }}
            
            See [CHANGELOG.md](https://github.com/SaintNick1214/Project-Cortex/blob/main/CHANGELOG.md) for details.
            
            ### Install
            ```bash
            npm install @cortexmemory/sdk@${{ needs.check-version.outputs.new-version }}
            ```
          draft: false
          prerelease: false

      - name: Verify npm publish
        run: |
          echo "Waiting for npm registry to update..."
          sleep 10
          npm view @cortexmemory/sdk version
          echo "✅ Published successfully!"

      - name: Post-publish summary
        run: |
          VERSION=${{ needs.check-version.outputs.new-version }}
          echo "════════════════════════════════════════════════════════════"
          echo "  ✅ RELEASE COMPLETE!"
          echo "════════════════════════════════════════════════════════════"
          echo ""
          echo "📦 Package: @cortexmemory/sdk@$VERSION"
          echo "📚 npm: https://www.npmjs.com/package/@cortexmemory/sdk"
          echo "🐙 GitHub: https://github.com/SaintNick1214/Project-Cortex/releases/tag/v$VERSION"
          echo ""
